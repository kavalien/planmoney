#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∞ —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º
"""

import os
import sys
import time
from pathlib import Path
from datetime import datetime, timedelta

# Add project root to path
sys.path.append(str(Path(__file__).parent))

import gspread
from google.oauth2.service_account import Credentials

def recreate_column_based_sheet():
    """–ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç —Å —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º"""
    
    print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º...")
    
    # Configuration
    credentials_file = "credentials/google_service_account.json"
    spreadsheet_id = "1S0ifwdFSuqrxfumNQlgPKA-jd32_bOcrU3ufemJXGPM"
    current_month = "2025-09"
    
    try:
        # Load credentials
        creds = Credentials.from_service_account_file(
            credentials_file,
            scopes=['https://www.googleapis.com/auth/spreadsheets']
        )
        
        # Connect to Google Sheets
        gc = gspread.authorize(creds)
        spreadsheet = gc.open_by_key(spreadsheet_id)
        
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Ç–∞–±–ª–∏—Ü–µ: {spreadsheet.title}")
        
        # Delete existing temp sheet if exists
        temp_name = f"{current_month}-columns"
        try:
            temp_sheet = spreadsheet.worksheet(temp_name)
            spreadsheet.del_worksheet(temp_sheet)
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ª–∏—Å—Ç '{temp_name}'")
            time.sleep(1)
        except gspread.WorksheetNotFound:
            pass
        
        # Create new sheet with temporary name
        print(f"üìä –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç '{temp_name}' —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º...")
        worksheet = spreadsheet.add_worksheet(
            title=temp_name,
            rows=100,
            cols=30  # Enough columns for all sections
        )
        time.sleep(1)
        
        # Section 1: Detailed Transactions (Columns A-G)
        print("   üìù –°–µ–∫—Ü–∏—è 1: –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (—Å—Ç–æ–ª–±—Ü—ã A-G)")
        setup_transactions_columns(worksheet, start_col='A')
        
        # Section 2: Expense Categories (Columns I-Q)
        print("   üí∏ –°–µ–∫—Ü–∏—è 2: –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (—Å—Ç–æ–ª–±—Ü—ã I-Q)")
        setup_expense_columns(worksheet, start_col='I')
        
        # Section 3: Income Categories (Columns S-X) 
        print("   üí∞ –°–µ–∫—Ü–∏—è 3: –î–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (—Å—Ç–æ–ª–±—Ü—ã S-X)")
        setup_income_columns(worksheet, start_col='S')
        
        # Section 4: Daily Balance (Columns Z-AD)
        print("   ‚öñÔ∏è –°–µ–∫—Ü–∏—è 4: –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å (—Å—Ç–æ–ª–±—Ü—ã Z-AD)")
        setup_balance_columns(worksheet, start_col='Z')
        
        # Delete old sheet and rename new one
        try:
            old_sheet = spreadsheet.worksheet(current_month)
            spreadsheet.del_worksheet(old_sheet)
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –ª–∏—Å—Ç '{current_month}'")
            time.sleep(1)
        except gspread.WorksheetNotFound:
            print(f"‚ÑπÔ∏è –°—Ç–∞—Ä—ã–π –ª–∏—Å—Ç '{current_month}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # Rename new sheet
        worksheet.update_title(current_month)
        print(f"‚úèÔ∏è –õ–∏—Å—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ '{current_month}'")
        
        print("üéâ –õ–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def setup_transactions_columns(worksheet, start_col):
    """Setup detailed transactions in columns A-G"""
    headers = ["–î–∞—Ç–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–¢–∏–ø", "–°—É–º–º–∞", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–û–ø–∏—Å–∞–Ω–∏–µ", "Telegram ID"]
    
    # Section header in row 1
    worksheet.update('A1', "–î–ï–¢–ê–õ–¨–ù–´–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò")
    time.sleep(0.5)
    
    # Column headers in row 2
    range_name = f'{start_col}2:G2'
    worksheet.update(range_name, [headers])
    time.sleep(0.5)
    
    # Format section header
    worksheet.format('A1:G1', {
        'backgroundColor': {'red': 0.2, 'green': 0.6, 'blue': 0.9},
        'textFormat': {'bold': True, 'foregroundColor': {'red': 1, 'green': 1, 'blue': 1}},
        'horizontalAlignment': 'CENTER'
    })
    
    # Format column headers
    worksheet.format('A2:G2', {
        'backgroundColor': {'red': 0.8, 'green': 0.8, 'blue': 0.8},
        'textFormat': {'bold': True}
    })

def setup_expense_columns(worksheet, start_col):
    """Setup expense categories in columns I-Q"""
    expense_categories = [
        "–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–ü–æ–∫—É–ø–∫–∏",
        "–ó–¥–æ—Ä–æ–≤—å–µ", "–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏", "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã"
    ]
    
    headers = ["–î–∞—Ç–∞"] + expense_categories + ["–ò—Ç–æ–≥–æ"]
    
    # Section header in row 1 - span across all columns
    worksheet.update('I1', "–†–ê–°–•–û–î–´ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú")
    time.sleep(0.5)
    
    # Column headers in row 2 - I to S (9 columns + 1 for total = 10)
    end_col = chr(ord(start_col) + len(headers) - 1)  # Calculate end column
    range_name = f'{start_col}2:{end_col}2'
    worksheet.update(range_name, [headers])
    time.sleep(0.5)
    
    # Add dates for entire month
    add_sample_dates(worksheet, start_col, 3)
    
    # Format section header
    worksheet.format(f'I1:{end_col}1', {
        'backgroundColor': {'red': 0.9, 'green': 0.4, 'blue': 0.4},
        'textFormat': {'bold': True, 'foregroundColor': {'red': 1, 'green': 1, 'blue': 1}},
        'horizontalAlignment': 'CENTER'
    })
    
    # Format column headers
    worksheet.format(f'I2:{end_col}2', {
        'backgroundColor': {'red': 0.9, 'green': 0.7, 'blue': 0.7},
        'textFormat': {'bold': True}
    })

def setup_income_columns(worksheet, start_col):
    """Setup income categories in columns S-X"""
    income_categories = [
        "–ó–∞—Ä–ø–ª–∞—Ç–∞", "–§—Ä–∏–ª–∞–Ω—Å", "–ü—Ä–µ–º–∏—è", "–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞", "–ü—Ä–æ—á–∏–µ –¥–æ—Ö–æ–¥—ã"
    ]
    
    headers = ["–î–∞—Ç–∞"] + income_categories + ["–ò—Ç–æ–≥–æ"]
    
    # Section header in row 1
    worksheet.update('S1', "–î–û–•–û–î–´ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú")
    time.sleep(0.5)
    
    # Column headers in row 2
    end_col = chr(ord(start_col) + len(headers) - 1)  # Calculate end column
    range_name = f'{start_col}2:{end_col}2'
    worksheet.update(range_name, [headers])
    time.sleep(0.5)
    
    # Add dates for entire month
    add_sample_dates(worksheet, start_col, 3)
    
    # Format section header
    worksheet.format(f'S1:{end_col}1', {
        'backgroundColor': {'red': 0.4, 'green': 0.9, 'blue': 0.4},
        'textFormat': {'bold': True, 'foregroundColor': {'red': 1, 'green': 1, 'blue': 1}},
        'horizontalAlignment': 'CENTER'
    })
    
    # Format column headers
    worksheet.format(f'S2:{end_col}2', {
        'backgroundColor': {'red': 0.7, 'green': 0.9, 'blue': 0.7},
        'textFormat': {'bold': True}
    })

def setup_balance_columns(worksheet, start_col):
    """Setup daily balance in columns Z-AD"""
    headers = ["–î–∞—Ç–∞", "–î–æ—Ö–æ–¥—ã", "–†–∞—Å—Ö–æ–¥—ã", "–°–∞–ª—å–¥–æ", "–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ"]
    
    # Section header in row 1
    worksheet.update('Z1', "–ï–ñ–ï–î–ù–ï–í–ù–´–ô –ë–ê–õ–ê–ù–°")
    time.sleep(0.5)
    
    # Column headers in row 2 (Z to AD = 5 columns)
    worksheet.update('Z2:AD2', [headers])
    time.sleep(0.5)
    
    # Add dates for entire month
    add_sample_dates(worksheet, start_col, 3)
    
    # Format section header
    worksheet.format('Z1:AD1', {
        'backgroundColor': {'red': 0.6, 'green': 0.6, 'blue': 0.9},
        'textFormat': {'bold': True, 'foregroundColor': {'red': 1, 'green': 1, 'blue': 1}},
        'horizontalAlignment': 'CENTER'
    })
    
    # Format column headers
    worksheet.format('Z2:AD2', {
        'backgroundColor': {'red': 0.8, 'green': 0.8, 'blue': 0.9},
        'textFormat': {'bold': True}
    })

def add_sample_dates(worksheet, start_col, start_row, max_days=None):
    """Add dates for the entire month to a column"""
    import calendar
    
    current_date = datetime.now()
    year = current_date.year
    month = current_date.month
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ
    days_in_month = calendar.monthrange(year, month)[1]
    
    # –ï—Å–ª–∏ max_days —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    if max_days:
        days_to_add = min(days_in_month, max_days)
    else:
        days_to_add = days_in_month
    
    dates_data = []
    
    for day in range(1, days_to_add + 1):
        date_obj = datetime(year, month, day)
        day_str = date_obj.strftime("%d.%m")
        dates_data.append([day_str])
    
    # Convert column letter to range
    end_row = start_row + days_to_add - 1
    range_name = f'{start_col}{start_row}:{start_col}{end_row}'
    worksheet.update(range_name, dates_data)
    time.sleep(0.5)
    
    print(f"   ‚úì –î–æ–±–∞–≤–ª–µ–Ω–æ {days_to_add} –¥–∞—Ç –≤ —Å—Ç–æ–ª–±–µ—Ü {start_col} –¥–ª—è {month}/{year}")

if __name__ == "__main__":
    success = recreate_column_based_sheet()
    if not success:
        sys.exit(1)