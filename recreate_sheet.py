#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
"""

import os
import sys
import time
from pathlib import Path
from datetime import datetime, timedelta

# Add project root to path
sys.path.append(str(Path(__file__).parent))

import gspread
from google.oauth2.service_account import Credentials

def recreate_month_sheet():
    """–ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –º–µ—Å—è—Ü–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
    
    print("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ —Å –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π...")
    
    # Configuration
    credentials_file = "credentials/google_service_account.json"
    spreadsheet_id = "1S0ifwdFSuqrxfumNQlgPKA-jd32_bOcrU3ufemJXGPM"
    current_month = "2025-09"
    
    try:
        # Load credentials
        creds = Credentials.from_service_account_file(
            credentials_file,
            scopes=['https://www.googleapis.com/auth/spreadsheets']
        )
        
        # Connect to Google Sheets
        gc = gspread.authorize(creds)
        spreadsheet = gc.open_by_key(spreadsheet_id)
        
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Ç–∞–±–ª–∏—Ü–µ: {spreadsheet.title}")
        
        # Create new comprehensive sheet with temporary name
        temp_name = f"{current_month}-new"
        print(f"üìä –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç '{temp_name}' —Å –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π...")
        worksheet = spreadsheet.add_worksheet(
            title=temp_name,
            rows=200,
            cols=20
        )
        time.sleep(1)
        
        # Section 1: Transaction Details (rows 1-50)
        print("   üìù –°–µ–∫—Ü–∏—è 1: –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (—Å—Ç—Ä–æ–∫–∏ 1-50)")
        setup_transactions_section(worksheet, 1)
        
        # Section 2: Expense Analytics (rows 55-85)
        print("   üí∏ –°–µ–∫—Ü–∏—è 2: –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (—Å—Ç—Ä–æ–∫–∏ 55-85)")
        setup_expenses_section(worksheet, 55)
        
        # Section 3: Income Analytics (rows 90-120)
        print("   üí∞ –°–µ–∫—Ü–∏—è 3: –î–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (—Å—Ç—Ä–æ–∫–∏ 90-120)")
        setup_income_section(worksheet, 90)
        
        # Section 4: Balance Summary (rows 125-155)
        print("   ‚öñÔ∏è –°–µ–∫—Ü–∏—è 4: –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å (—Å—Ç—Ä–æ–∫–∏ 125-155)")
        setup_balance_section(worksheet, 125)
        
        # Now delete old sheet and rename new one
        try:
            old_sheet = spreadsheet.worksheet(current_month)
            spreadsheet.del_worksheet(old_sheet)
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –ª–∏—Å—Ç '{current_month}'")
            time.sleep(1)
        except gspread.WorksheetNotFound:
            print(f"‚ÑπÔ∏è –°—Ç–∞—Ä—ã–π –ª–∏—Å—Ç '{current_month}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # Rename new sheet
        worksheet.update_title(current_month)
        print(f"‚úèÔ∏è –õ–∏—Å—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ '{current_month}'")
        
        print("üéâ –õ–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def setup_transactions_section(worksheet, start_row):
    """Setup transaction details section."""
    headers = ["–î–∞—Ç–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–¢–∏–ø", "–°—É–º–º–∞", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–û–ø–∏—Å–∞–Ω–∏–µ", "Telegram ID"]
    
    # Section title
    worksheet.update(f'A{start_row}', "–î–ï–¢–ê–õ–¨–ù–´–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò")
    time.sleep(0.5)
    
    # Headers
    headers_row = start_row + 1
    worksheet.update(f'A{headers_row}', [headers])
    time.sleep(0.5)
    
    # Format section
    worksheet.format(f'A{start_row}:G{start_row}', {
        'backgroundColor': {'red': 0.2, 'green': 0.6, 'blue': 0.9},
        'textFormat': {'bold': True, 'foregroundColor': {'red': 1, 'green': 1, 'blue': 1}}
    })
    
    worksheet.format(f'A{headers_row}:G{headers_row}', {
        'backgroundColor': {'red': 0.8, 'green': 0.8, 'blue': 0.8},
        'textFormat': {'bold': True}
    })

def setup_expenses_section(worksheet, start_row):
    """Setup expenses analytics section."""
    expense_categories = [
        "–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–ü–æ–∫—É–ø–∫–∏",
        "–ó–¥–æ—Ä–æ–≤—å–µ", "–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏", "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã"
    ]
    
    # Section title
    worksheet.update(f'A{start_row}', "–†–ê–°–•–û–î–´ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú")
    time.sleep(0.5)
    
    # Headers
    headers = ["–î–∞—Ç–∞"] + expense_categories + ["–ò—Ç–æ–≥–æ"]
    headers_row = start_row + 1
    worksheet.update(f'A{headers_row}', [headers])
    time.sleep(0.5)
    
    # Add sample days
    add_month_days_template(worksheet, start_row + 2, len(headers))
    
    # Format section
    worksheet.format(f'A{start_row}:J{start_row}', {
        'backgroundColor': {'red': 0.9, 'green': 0.4, 'blue': 0.4},
        'textFormat': {'bold': True, 'foregroundColor': {'red': 1, 'green': 1, 'blue': 1}}
    })
    
    worksheet.format(f'A{headers_row}:J{headers_row}', {
        'backgroundColor': {'red': 0.9, 'green': 0.7, 'blue': 0.7},
        'textFormat': {'bold': True}
    })

def setup_income_section(worksheet, start_row):
    """Setup income analytics section."""
    income_categories = [
        "–ó–∞—Ä–ø–ª–∞—Ç–∞", "–§—Ä–∏–ª–∞–Ω—Å", "–ü—Ä–µ–º–∏—è", "–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞", "–ü—Ä–æ—á–∏–µ –¥–æ—Ö–æ–¥—ã"
    ]
    
    # Section title
    worksheet.update(f'A{start_row}', "–î–û–•–û–î–´ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú")
    time.sleep(0.5)
    
    # Headers
    headers = ["–î–∞—Ç–∞"] + income_categories + ["–ò—Ç–æ–≥–æ"]
    headers_row = start_row + 1
    worksheet.update(f'A{headers_row}', [headers])
    time.sleep(0.5)
    
    # Add sample days
    add_month_days_template(worksheet, start_row + 2, len(headers))
    
    # Format section
    worksheet.format(f'A{start_row}:G{start_row}', {
        'backgroundColor': {'red': 0.4, 'green': 0.9, 'blue': 0.4},
        'textFormat': {'bold': True, 'foregroundColor': {'red': 1, 'green': 1, 'blue': 1}}
    })
    
    worksheet.format(f'A{headers_row}:G{headers_row}', {
        'backgroundColor': {'red': 0.7, 'green': 0.9, 'blue': 0.7},
        'textFormat': {'bold': True}
    })

def setup_balance_section(worksheet, start_row):
    """Setup balance summary section."""
    # Section title
    worksheet.update(f'A{start_row}', "–ï–ñ–ï–î–ù–ï–í–ù–´–ô –ë–ê–õ–ê–ù–°")
    time.sleep(0.5)
    
    # Headers
    headers = ["–î–∞—Ç–∞", "–î–æ—Ö–æ–¥—ã", "–†–∞—Å—Ö–æ–¥—ã", "–°–∞–ª—å–¥–æ", "–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ"]
    headers_row = start_row + 1
    worksheet.update(f'A{headers_row}', [headers])
    time.sleep(0.5)
    
    # Add sample days
    add_month_days_template(worksheet, start_row + 2, len(headers))
    
    # Format section
    worksheet.format(f'A{start_row}:E{start_row}', {
        'backgroundColor': {'red': 0.6, 'green': 0.6, 'blue': 0.9},
        'textFormat': {'bold': True, 'foregroundColor': {'red': 1, 'green': 1, 'blue': 1}}
    })
    
    worksheet.format(f'A{headers_row}:E{headers_row}', {
        'backgroundColor': {'red': 0.8, 'green': 0.8, 'blue': 0.9},
        'textFormat': {'bold': True}
    })

def add_month_days_template(worksheet, start_row, cols_count):
    """Add template days for current month."""
    current_date = datetime.now().replace(day=1)
    batch_data = []
    
    # Add first 7 days as template
    for i in range(7):
        day = current_date + timedelta(days=i)
        day_str = day.strftime("%d.%m")
        row_data = [day_str] + [''] * (cols_count - 1)
        batch_data.append(row_data)
    
    worksheet.update(f'A{start_row}', batch_data)
    time.sleep(0.5)
    
    # Add monthly total row
    total_row = start_row + 10
    worksheet.update(f'A{total_row}', "–ò–¢–û–ì–û –ó–ê –ú–ï–°–Ø–¶")
    time.sleep(0.5)

if __name__ == "__main__":
    success = recreate_month_sheet()
    if not success:
        sys.exit(1)